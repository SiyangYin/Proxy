#!/usr/bin/env python
# encoding: utf-8

from socket import socket, AF_INET, SOCK_STREAM
import sys, time, select, thread, re


class Proxy:
    def __init__(self, proxyAsServerSocket, logPath, alpha, fakeIp, serverIp):
        self.logFile = open(logPath, 'w+')  # create a file object to wirte log
        self.alpha = alpha  # passing the parameter alpha
        self.serverIp = serverIp  # passing the parameter server IP
        self.serverPort = 8080  # set the server Port
        # self.ts=0
        self.bitrate = ''  # initialize bitrate
        self.chunkName = ''  # initialize chunk name
        self.chunkSizeB = 0  # initialize chunksize B
        self.bufferSize = 8192
        self.availableBitrate = []  # initialize available bitrate
        self.proxyAsClientSocket = socket(AF_INET, SOCK_STREAM)  # create connection socket
        self.proxyAsClientSocket.bind((fakeIp, 0))  # bind it with fake IP
        self.proxyAsClientSocket.connect((self.serverIp, self.serverPort))  # connect to server
        self.connectionWithClientSocket, addr = proxyAsServerSocket.accept()  # connect to client

    def start(self):
        self.T_current = 10
        self.ts = time.time()  # initialize the start time
        inputs = [self.connectionWithClientSocket, self.proxyAsClientSocket]  # inputs for select
        outputs = []
        # try:	                                        #outputs for select
        while True:
            readable, writable, exceptional = select.select(inputs, outputs, inputs, 3)  # select usable socket
            # if exceptional:
            # break
            for s in readable:
                message = s.recv(self.bufferSize)  # receive message from client or server
                if message:  # if message is not empty
                    if s is self.connectionWithClientSocket:  # message is request
                        bigBuckBunnyObjext = re.search(r'.f4m', message, flags=0)  # find the .f4m file
                        if bigBuckBunnyObjext is not None:
                            self.proxyAsClientSocket.send(message)  # send request to server
                            manifest = self.proxyAsClientSocket.recv(self.bufferSize)
                            if manifest:
                                self.availableBitrate = re.findall(r'bitrate="(\d*)"',
                                                                   manifest)  # to get the available bitrate
                                self.bitrate = self.availableBitrate[0]  # initialize bitrate
                                self.T_current = float(self.availableBitrate[
                                                           0])  # initialize current throughput
                            message.decode()
                            re.sub('bunny', 'bunny_nolist', message)  # modify the .f4m file
                            message.encode()
                        bitrateObject = re.search(r'/vod/(\d*)Seg', message, flags=0)
                        if bitrateObject is not None:
                            if self.availableBitrate:
                                message.decode()
                                re.sub(r'/vod/(\d*)Seg', '/vod/' + self.availableBitrate[0] + 'Seg',
                                       message)  # modify the request
                                message.encode()
                                for i in self.availableBitrate:  # choose the bitrate according to the actual throughput
                                    if self.T_current / 1.5 >= float(i):
                                        message.decode()
                                        re.sub(r'/vod/(\d*)Seg', '/vod/' + i + 'Seg', message)
                                        message.encode()
                                        self.bitrate = i
                        chunkNameObject = re.search(r'/vod/\d*Seg\d*-Frag\d*', message, flags=0)
                        if chunkNameObject is not None:
                            self.chunkName = chunkNameObject.group()
                        self.proxyAsClientSocket.send(message)  # send request to server
                    elif s is self.proxyAsClientSocket:  # message is response
                        chunkSizeBObjext = re.search(b'Content-Length: (\d*)', message,
                                                     flags=0)  # find out the chunk size B
                        if chunkSizeBObjext is not None:
                            self.chunkSizeB = int(chunkSizeBObjext.group(1))
                            print(self.chunkSizeB)
                            count = 1
                        else:
                            count += 1  # count the buffer number
                        if count * self.bufferSize > self.chunkSizeB:  # to mark finish transport one chunk
                            count = 1
                            self.tf = time.time()  # record the finish time
                            self.duration = self.tf - self.ts
                            self.T_new = 8 * self.chunkSizeB / (self.tf - self.ts) / 1024  # measure the new throughput
                            self.T_current = self.alpha * self.T_new + (
                                        1 - self.alpha) * self.T_current  # calculate the current throughput
                            if self.bitrate and self.chunkName:
                                print('%d %f %d %f %s %s %s\n' % (
                                time.time(), self.duration, self.T_new, self.T_current, self.bitrate, self.serverIp,
                                self.chunkName))  # print out log file
                                self.logFile.write('%d %f %d %f %s %s %s\n' % (
                                time.time(), self.duration, self.T_new, self.T_current, self.bitrate, self.serverIp,
                                self.chunkName))  # write log file
                            self.ts = time.time()  # record the start time
                        self.connectionWithClientSocket.send(message)  # send message to client
                else:
                    break
        self.connectionWithClientSocket.close()  # close the connection with client
        self.proxyAsClientSocket.close()  # close the connection with server
        self.logFile.close()
        print("connection closed")


if __name__ == '__main__':
    logPath = sys.argv[1]  # the path of log file
    alpha = float(sys.argv[2])  # the paramet alpha
    listenPort = int(sys.argv[3])  # The proxy port number 8000
    fakeIp = sys.argv[4]  # 1.0.0.1/2.0.0.1(localhost)
    serverIp = sys.argv[5]  # 3.0.0.1/4.0.0.1(localhost)
    proxyAsServerSocket = socket(AF_INET, SOCK_STREAM)  # create listening socket
    proxyAsServerSocket.bind(('',
                              listenPort))  # bind the listen socket to receive traffic to the specified port regardless of the IP address
    proxyAsServerSocket.listen(1)  # setup listening
    print("The proxy is ready to receive")
    while True:
        try:
            thread.start_new_thread(Proxy(proxyAsServerSocket, logPath, alpha, fakeIp, serverIp).start,
                                    ())  # every time start a new thread to process
        except Exception as e:
            print(e)
